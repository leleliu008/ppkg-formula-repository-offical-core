#!/bin/sh

set -e

COLOR_RED='\033[0;31m'          # Red
COLOR_GREEN='\033[0;32m'        # Green
COLOR_YELLOW='\033[0;33m'       # Yellow
COLOR_BLUE='\033[0;94m'         # Blue
COLOR_PURPLE='\033[0;35m'       # Purple
COLOR_OFF='\033[0m'             # Reset


version_sort() {
    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sort.html
    # https://man.netbsd.org/NetBSD-8.1/i386/sort.1
    #
    # sort: unrecognized option: V
    # BusyBox v1.29.3 (2019-01-24 07:45:07 UTC) multi-call binary.
    # Usage: sort [-nrugMcszbdfiokt] [-o FILE] [-k start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...
    if  printf '\n' | (sort -V > /dev/null 2>&1) ; then
        printf '%s\n' "$@" | sort -V
    else
        printf '%s\n' "$@" | sort -t. -n -k1,1 -k2,2 -k3,3 -k4,4
    fi
}

# check if match the condition
#
# condition:
# eq  equal
# ne  not equal
# gt  greater than
# lt  less than
# ge  greater than or equal
# le  less than or equal
#
# examples:
# version_match 1.15.3 eq 1.16.0
# version_match 1.15.3 lt 1.16.0
# version_match 1.15.3 gt 1.16.0
# version_match 1.15.3 le 1.16.0
# version_match 1.15.3 ge 1.16.0
version_match() {
    case $2 in
        eq)  [ "$1"  = "$3" ] ;;
        ne)  [ "$1" != "$3" ] ;;
        le)
            if [ "$1" = "$3" ] ; then
                return 0
            fi
            [ "$1" = "$(version_sort "$1" "$3" | head -n 1)" ]
            ;;
        ge)
            if [ "$1" = "$3" ] ; then
                return 0
            fi
            [ "$1" = "$(version_sort "$1" "$3" | tail -n 1)" ]
            ;;
        lt)
            if [ "$1" = "$3" ] ; then
                return 1
            fi
            [ "$1" = "$(version_sort "$1" "$3" | head -n 1)" ]
            ;;
        gt)
            if [ "$1" = "$3" ] ; then
                return 1
            fi
            [ "$1" = "$(version_sort "$1" "$3" | tail -n 1)" ]
            ;;
        *)  printf '%s\n' "version_compare: $2: not supported operator." >&2
            return 1
    esac
}

get_version_from_formula() {
    sed -n '/^version:/p' "$1" | cut -c10-
}

get_src_url_from_formula() {
    sed -n '/^src-url:/p' "$1" | cut -c10-
}

get_git_url_from_formula() {
    sed -n '/^git-url:/p' "$1" | cut -c10-
}

get_web_url_from_formula() {
    sed -n '/^web-url:/p' "$1" | cut -c10-
}

get_version_from_url() {
    basename "$1" | tr '_@' - | sed -e 's|\.tar\.[glx]z$||' -e 's|\.tar\.bz2$||' -e 's|\.t[glx]z$||' -e 's|\.zip$||' -e 's|-stable||' -e 's|-source||' -e 's|[-.]src$||' -e 's|\.orig||' | awk -F- '{print $NF}' | sed -e 's|^v||'
}

#########################################################################

for FORMULA_FILEPATH in formula/linux/*.yml formula/*.yml
do
    FORMULA_FILENAME="${FORMULA_FILEPATH##*/}"

    PACKAGE_VERSION="$(get_version_from_formula "$FORMULA_FILEPATH")"

    if [ -z "$PACKAGE_VERSION" ] ; then
        PACKAGE_SRC_URL="$(get_src_url_from_formula "$FORMULA_FILEPATH")"

        if [ -n "$PACKAGE_SRC_URL" ] ; then
            PACKAGE_VERSION="$(get_version_from_url "$PACKAGE_SRC_URL")"
        fi
    fi

    ####################################################################

    unset URL

    PACKAGE_GIT_URL="$(get_git_url_from_formula "$FORMULA_FILEPATH")"

    if [ -n "$PACKAGE_GIT_URL" ] ; then
        case $PACKAGE_GIT_URL in
            https://github.com/*)
                URL="$PACKAGE_GIT_URL"
                ;;
        esac
    fi

    if [ -z "$URL" ] ; then
        URL="$(get_web_url_from_formula "$FORMULA_FILEPATH")"
    fi

    if [ -z "$URL" ] ; then
        URL="$PACKAGE_GIT_URL"
    fi

    ####################################################################

    PACKAGE_NAME="${FORMULA_FILENAME%.yml}"

    BREW_PACKAGE_NMAE="$(./package-name-to-homebrew.sh "$PACKAGE_NAME")"

    if brew info "$BREW_PACKAGE_NMAE" > /dev/null 2>&1 ; then
        BREW_PACKAGE_VERS=$(brew info "$BREW_PACKAGE_NMAE" --json | jq -r '.[0].versions.stable' || true)

        if [ -z "$BREW_PACKAGE_VERS" ] ; then
            printf "${COLOR_BLUE}%-20s %-15s %s${COLOR_OFF}\n\n" "$PACKAGE_NAME" "$PACKAGE_VERSION" "$URL"
        else
            if version_match "$BREW_PACKAGE_VERS" gt "$PACKAGE_VERSION" ; then
                case $BREW_PACKAGE_NMAE in
                    lib*) X=lib ;;
                       *) X="$(printf '%.1s' "$BREW_PACKAGE_NMAE")"
                esac

                printf "${COLOR_RED}%-20s %-15s %s${COLOR_OFF}\n" "$PACKAGE_NAME" "$PACKAGE_VERSION" "$URL"
                printf "${COLOR_RED}%-20s %-15s %s${COLOR_OFF}\n\n" "$BREW_PACKAGE_NMAE" "$BREW_PACKAGE_VERS" "https://github.com/Homebrew/homebrew-core/blob/master/Formula/$X/$BREW_PACKAGE_NMAE.rb"
            fi
        fi
    else
        printf "${COLOR_BLUE}%-20s %-15s %s${COLOR_OFF}\n\n" "$PACKAGE_NAME" "$PACKAGE_VERSION" "$URL"
    fi
done
